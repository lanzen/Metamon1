install.packages("lulu")
read.csv(file.choose())
d=read.csv(file.choose())
hist(d$Reads)
hist(d$Reads,breaks=100)
hist(d$Reads,breaks=50)
hist(d$Reads,breaks=20)
hist(d$Reads,col="grey")
out[i,"AMBI"] <- as.numeric(as.vector(ambi))
a=c(1:8)
b=c(1:8)
cor.test(a,b,method="Spear")
cor.test(a,b,method="spear")
5E-5*24
?gsub
koMatrix = read.table(file=file.choose(), sep="\t",header=T,row.names=1)
dim(koMatrix)
koMatrix = read.table(file=file.choose(), sep=",",header=T,row.names=1)
dim(koMatrix)
names(koMatrix)
names(koMatrix)[1]
koMatrix[1,c(1:10)]
row.names(koMatrix)=gsub("ko:","",row.names(koMatrix))
koMatrix[1,c(1:10)]
koMatrix[c(1:3),c(1:10)]
kmt = as.data.frame(t(koMatrix))
dim(kmt)
dim(koMatrix)
kmt[c(1:3),c(1:3)]
?write.csv
write.csv(kmt,file=file.choose(),quote=F)
write.csv(kmt,file=file.choose(),quote=F)
kmt = cbind(genome_ID = row.names(kmt),kmt)
write.csv(kmt,file=file.choose(),quote=F,row.names=F)
kmtS = kmt[c("TARA_ANE_MAG_00075","TARA_ANW_MAG_00006","TARA_ANW_MAG_00019",
"TARA_ASW_MAG_00003","TARA_ION_MAG_00014","TARA_PON_MAG_00023",
"TARA_PON_MAG_00028","TARA_PSE_MAG_00030","TARA_PSE_MAG_00060",
"TARA_PSE_MAG_00116","TARA_PSW_MAG_00013","TARA_PSW_MAG_00018",
"TARA_PSW_MAG_00026","TARA_PSW_MAG_00031","TARA_PSW_MAG_00130")]
kmtS = kmt[c("TARA_ANE_MAG_00075","TARA_ANW_MAG_00006","TARA_ANW_MAG_00019",
"TARA_ASW_MAG_00003","TARA_ION_MAG_00014","TARA_PON_MAG_00023",
"TARA_PON_MAG_00028","TARA_PSE_MAG_00030","TARA_PSE_MAG_00060",
"TARA_PSE_MAG_00116","TARA_PSW_MAG_00013","TARA_PSW_MAG_00018",
"TARA_PSW_MAG_00026","TARA_PSW_MAG_00031","TARA_PSW_MAG_00130"),]
write.csv(kmtS,file=file.choose(),quote=F,row.names=F)
write.csv(kmtS,file=file.choose(),quote=F,row.names=F)
dim(kmtS)
kmt = cbind(genome_ID = row.names(kmt),kmt)
kmt = as.data.frame(t(koMatrix))
kmt = cbind(genome_ID = row.names(kmt),kmt)
kmtS = kmt[c("TARA_ANE_MAG_00075","TARA_ANW_MAG_00006","TARA_ANW_MAG_00019",
"TARA_ASW_MAG_00003","TARA_ION_MAG_00014","TARA_PON_MAG_00023",
"TARA_PON_MAG_00028","TARA_PSE_MAG_00030","TARA_PSE_MAG_00060",
"TARA_PSE_MAG_00116","TARA_PSW_MAG_00013","TARA_PSW_MAG_00018",
"TARA_PSW_MAG_00026","TARA_PSW_MAG_00031","TARA_PSW_MAG_00130"),]
kmtS[c(1:3),c(1:3)]
row.names(kmtS)
kmtS = kmt[c("TARA_ANW_MAG_00006","TARA_ANW_MAG_00019",
"TARA_ASW_MAG_00003","TARA_ION_MAG_00014","TARA_PON_MAG_00023",
"TARA_PON_MAG_00028","TARA_PSE_MAG_00030","TARA_PSE_MAG_00060",
"TARA_PSW_MAG_00013","TARA_PSW_MAG_00018",
"TARA_PSW_MAG_00026","TARA_PSW_MAG_00031"),]
write.csv(kmtS,file=file.choose(),quote=F,row.names=F)
summary(kmtS)
summary(kmtS$K00001)
?ranger
require(ranger)
?ranger
load("~/projects/uGAMBI_RC/MBC_2019/.RData")
mds$StationSeasonYear = as.factor(paste(mds$Station,mds$Season, mds$Year,sep=""))
mds$col_plot = as.numeric(mds$Estuary)
t="PI"
# included_samples = (!is.na(mds[,t]) & !is.na(mds$SalClass) & mds$Environment=="Estuarine")
# extra=""
#
included_samples = (!is.na(mds[,t]) & mds$Environment=="Estuarine" & mds$Nacid=="DNA")
extra = "_DNA_only"
source('~/projects/uGAMBI_RC/MBC_2019/R/sml_compo.R')
# included_samples = (!is.na(mds[,t]) & !is.na(mds$SalClass) & mds$Environment=="Estuarine")
# extra=""
#
included_samples = (!is.na(mds[,t]) & mds$Environment=="Estuarine" & mds$Nacid=="DNA" &!is.na(mds$SalClass))
extra = "_DNA_only"
# included_samples = (!is.na(mds[,t]) & mds$Environment!="Offshore")
# extra = "_w_Coastal"
# included_samples = (!is.na(mds[,t]))
# extra = "_all_samples"
md.train = mds[included_samples,]
otus.train = otus.s.ra.f[included_samples,]
taxa.train = taxa.ass.ra.f[included_samples,]
otus.train = otus.train[,colSums(otus.train)>0]
dim(otus.train)
taxa.train = taxa.train[,colSums(taxa.train)>0]
dim(taxa.train)
#otus.train = decostand(otus.train, method="hell") #(no effect whatsoever)
#
extra=extra+"_w_SalinityClass"
#otus.train = decostand(otus.train, method="hell") #(no effect whatsoever)
#
extra=paste(extra,"_w_SalinityClass",sep="")
nOTUs = dim(otus.train)[2]-1
preds <- sml_compo(otu_table = otus.train, metadata = md.train, index=t,
cross_val = "Estuary",
algo = "RF", optim_overfit = T)
source('~/projects/uGAMBI_RC/MBC_2019/R/plot_ml.R')
t
t="MAMBI"
t
load("~/projects/uGAMBI_RC/MBC_2019/.RData")
t
t="MAMBI"
# included_samples = (!is.na(mds[,t]) & !is.na(mds$SalClass) & mds$Environment=="Estuarine")
# extra=""
#
included_samples = (!is.na(mds[,t]) & mds$Environment=="Estuarine" & mds$Nacid=="DNA")
extra = "_DNA_only"
md.train = mds[included_samples,]
otus.train = otus.s.ra.f[included_samples,]
taxa.train = taxa.ass.ra.f[included_samples,]
otus.train = otus.train[,colSums(otus.train)>0]
dim(otus.train)
taxa.train = taxa.train[,colSums(taxa.train)>0]
dim(taxa.train)
preds <- sml_compo(otu_table = otus.train, metadata = md.train, index=t,
cross_val = "Estuary",
algo = "RF", optim_overfit = T)
source('~/projects/uGAMBI_RC/MBC_2019/R/plot_ml.R')
status <- plot_ml(data = preds, metadata = md.train, index = t,
aggreg = c("StationSeasonYear", "Estuary"),
title = "All abundant OTUs (estuarine)")
dev.off()
status <- plot_ml(data = preds, metadata = md.train, index = t,
aggreg = c("StationSeasonYear", "Estuary"),
title = "All abundant OTUs (estuarine)")
pdf(paste("img/sed/ML/",t,"_RF_pred_rerun",extra,".pdf",sep=""),width=8,height=5)
status <- plot_ml(data = preds, metadata = md.train, index = t,
aggreg = c("StationSeasonYear", "Estuary"),
title = "All abundant OTUs (estuarine)")
dev.off()
t
pdf(paste("img/sed/ML/OTUs_DNA/",t,"_RF_pred",extra,".pdf",sep=""),width=8,height=5)
status <- plot_ml(data = preds, metadata = md.train, index = t,
aggreg = c("StationSeasonYear", "Estuary"),
title = "All abundant OTUs (estuarine)")
dev.off()
plot(1,1)
status <- plot_ml(data = preds, metadata = md.train, index = t,
aggreg = c("StationSeasonYear", "Estuary"),
title = "All abundant OTUs (estuarine)")
??kappa2
###############################################################
##########  plot after ML
###############################################################
require(irr)
status <- plot_ml(data = preds, metadata = md.train, index = t,
aggreg = c("StationSeasonYear", "Estuary"),
title = "All abundant OTUs (estuarine)")
require(TITAN2)
cite(titan2)
cite(TITAN2)
cite(TITAN2)
cite("TITAN2")
?TITAN2
require(splines)
?splines
?TITAN
require(TITAN)
cite("TITAN2")
require(TITAN2)
?`TITAN2-package`
?titan
?`TITAN2-package`
?TITAN2
require(quantreg)
require(splines)
cite(quantreg)
?quantreg
?rq
?br
??br
require(SparseM)
?br
?quantreg
??quantreg
require(quantreg)
?quantreg
??rq
?rq
?bs
?predict
?rq
?praise
?ranger
require(ranger)
?ranger
??irr
?irr
require(irr)
?irr
?kappa2
?ggplot2
require(ggplot2)
?ggplot2
??ggplot
?ggplot2
??`ggplot2-ggproto`
??rrarefy
?quantreg
??quantreg
?rq
install.packages(metagenomics)
install.packages("metagenomics")
??t4f
install.packages("themetagenomics")
install.packages("themetagenomics")
install.packages(c("assertthat", "backports", "BH", "bindrcpp", "caTools", "cli", "curl", "data.table", "Deriv", "devtools", "dplyr", "e1071", "evaluate", "formatR", "Formula", "gam", "git2r", "glue", "highr", "hms", "htmltools", "htmlwidgets", "httr", "igraph", "inline", "irr", "jpeg", "jsonlite", "knitr", "kohonen", "labdsv", "lambda.r", "lpSolve", "markdown", "MASS", "matrixStats", "mgcv", "mime", "openssl", "pillar", "pinp", "pkgconfig", "plogr", "purrr", "R6", "randomForest", "ranger", "Rcpp", "readbitmap", "readr", "rJava", "rlang", "rmarkdown", "rpart", "rstudioapi", "RUnit", "RWeka", "RWekajars", "scales", "SparseM", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "TITAN2", "utf8", "vioplot", "viridis", "visNetwork", "whisker", "withr", "xtable", "yaml", "zoo"))
devtools::install_url("http://tax4fun.gobics.de/Tax4Fun/Tax4Fun_0.3.1.tar.gz")
BiocManager::install("biom")
install.packages("BiocManager")
library("BiocManager")
BiocManager::install("biom")
library(Tax4Fun)
?Tax4Fun
devtools::install_url("https://sourceforge.net/projects/tax4fun2/files/Version1.1.3/Tax4Fun2_1.1.3.tar.gz/download")
require(Tax4Fun2)
?Tax4Fun2
?runRefBlast
?buildReferenceData.R
?buildReferenceData
buildReferenceData()
?vegdist
require(vegan)
?vegdist
?decostand
require(BiocManager)
BiocManager::install("decontam")
library(devtools)
devtools::install_github("benjjneb/decontam")
library(devtools)
devtools::install_github("benjjneb/decontam")
BiocManager::install("decontam")
BiocManager::install("decontam")
require(decontam)
library(devtools)
devtools::install_github("benjjneb/decontam", version="1.2")
.rs.restartR()
library(devtools)
devtools::install_github("benjjneb/decontam", version="1.2")
setwd("/home/alanzen/projects/Metamon/WP2/SWARM_WP2_all_20200708")
source('../R/utils/filtering.R')
source('../R/utils/diversity.r')
source('../R/utils/taxaplot.R')
source('../R/utils/mergeOTUTable.R')
source('../R/utils/correlationTests.r')
require(vegan)
load(".RData")
metKingdom
row.names(mdR.18S)
mdR.18S$Experiment
mdR.18S$Group
mdAllButH4 = mdR.18S[mdR.18S$Experiment!="IntraGrabAndXHom",]
tra_all = taxa.all.18S[,c("Rank","Taxonpath",row.names(mdAllButH4))]
grouping_info<-data.frame(row.names=row.names(mdAllButH4), mdAllButH4$Group)
mdR.18S
mdAllButH4
row.names(mdAllButH4)
tra_all = taxa.all.18S[,c("Rank","Taxonpath",row.names(mdAllButH4))]
grouping_info<-data.frame(row.names=row.names(mdAllButH4), mdAllButH4$Group)
ranks = data.frame(rank=c("superkingdom","kingdom","phylum","class","order","family","genus"),
levels=c(6,9,25,25,25,25,25))
summary(tra_all$Rank)
for (i in c(1:7)){
r=as.character(ranks$rank[i])
leveltax.18Sa = as.data.frame(t(tra_all[tra_all$Rank==r,-c(1:2)]))
print(paste(mean(rowSums(leveltax.18Sa))*100,"% classified at rank",r))
pdf(paste("../img/18S/taxon_barplots_all/",r,".pdf",sep=""),height=9,width=20)
taxaplot(ranks$levels[i],grouping_info,leveltax.18Sa)
dev.off()
}
metKingdom = tra_all["Metazoa (Animalia)",c(3:92)]
tra_all.met = tra_all[grep("Metazoa",tra_all$Taxonpath),]
ranks = data.frame(rank=c("phylum","class","order","family"),
levels=c(22,24,24,12))
for (i in c(1:4)){
r=as.character(ranks$rank[i])
leveltax.18Sa = as.data.frame(t(tra_all.met[tra_all.met$Rank==r,-c(1:2)])) / t(metKingdom)
print(paste(mean(rowSums(leveltax.18Sa))*100,"% classified at rank",r))
pdf(paste("../img/18S/taxon_barplots_all/",r,"_Metazoa.pdf",sep=""),height=9,width=20)
taxaplot(ranks$levels[i],grouping_info,leveltax.18Sa)
dev.off()
}
otherGrabs = mdAllButH4[mdAllButH4$Grab!=4,]
tra_og = taxa.all.18S[,c("Rank","Taxonpath",row.names(otherGrabs))]
mdAllButH4
otherGrabs$Experiment
mdExtra = mdAllButH4[mdAllButH4$Experiment=="GrabEXandPCRRep",]
mdExtra
tra_og = taxa.all.18S[,c("Rank","Taxonpath",row.names(mdExtra))]
grouping_info<-data.frame(row.names=row.names(mdExtra), mdExtra$Grab)
ranks = data.frame(rank=c("superkingdom","kingdom","phylum","class","order","family","genus"),
levels=c(6,9,25,25,25,25,25))
summary(tra_og$Rank)
for (i in c(1:7)){
r=as.character(ranks$rank[i])
leveltax.18Sa = as.data.frame(t(tra_og[tra_og$Rank==r,-c(1:2)]))
print(paste(mean(rowSums(leveltax.18Sa))*100,"% classified at rank",r))
pdf(paste("../img/18S/taxon_barplots_all/",r,"_pre_v_post_PCR_pooling.pdf",sep=""),
height=9,width=15)
taxaplot(ranks$levels[i],grouping_info,leveltax.18Sa)
dev.off()
}
grouping_info<-data.frame(row.names=row.names(mdExtra), paste("Grab",mdExtra$Grab))
ranks = data.frame(rank=c("superkingdom","kingdom","phylum","class","order","family","genus"),
levels=c(6,9,25,25,25,25,25))
for (i in c(1:7)){
r=as.character(ranks$rank[i])
leveltax.18Sa = as.data.frame(t(tra_og[tra_og$Rank==r,-c(1:2)]))
print(paste(mean(rowSums(leveltax.18Sa))*100,"% classified at rank",r))
pdf(paste("../img/18S/taxon_barplots_all/",r,"_pre_v_post_PCR_pooling.pdf",sep=""),
height=7,width=10)
taxaplot(ranks$levels[i],grouping_info,leveltax.18Sa)
dev.off()
}
ass.all.18S = read.table("18S/CREST_Filtered/All_Assignments.tsv",sep="\t",
header=T,row.names=3, check.names = F)
ass.extra = ass.all.18S[,c("Rank","Taxonpath",row.names(mdExtra))]
ass.extra = decostand(as.data.frame(t(ass.all.18S[,row.names(mdExtra)])),
method="total")
pdf("../img/18S/taxon_barplots_all/Assignments_pre_v_post_PCR_pooling.pdf",
height=7,width=10)
taxaplot(30,grouping_info,ass.extra)
dev.off()
pdf("../img/18S/taxon_barplots_all/Assignments_pre_v_post_PCR_pooling.pdf",
height=6,width=9)
taxaplot(30,grouping_info,ass.extra)
dev.off()
mdAllButH4 = mdR.COI[mdR.COI$Experiment!="IntraGrabAndXHom",]
mdAllButH4 = md.COI.nc[md.COI.nc$Experiment!="IntraGrabAndXHom",]
taxa.all.COI = read.table("COI/CREST_Filtered/Relative_Abundance.tsv",sep="\t",
header=T,row.names=3, check.names = F)
tra_all = taxa.all.COI[,c("Rank","Taxonpath",row.names(mdAllButH4))]
grouping_info<-data.frame(row.names=row.names(mdAllButH4), mdAllButH4$Group)
summary(tra_all$Rank)
ranks = data.frame(rank=c("phylum","class","order","family","genus","species"),
levels=c(15,25,25,25,25,25))
ass.allbutH4 = decostand(as.data.frame(t(ass.all.18S[,row.names(mdAllButH4)])),
method="total")
pdf("../img/18S/taxon_barplots_all/Assignments_all_butH4.pdf",height=9,width=20)
taxaplot(30,grouping_info,ass.allbutH4)
dev.off()
mdAllButH4 = md.COI.nc[md.COI.nc$Experiment!="IntraGrabAndXHom",]
taxa.all.COI = read.table("COI/CREST_Filtered/Relative_Abundance.tsv",sep="\t",
header=T,row.names=3, check.names = F)
ass.all.COI = read.table("COI/CREST_Filtered/All_Assignments.tsv",sep="\t",
header=T,row.names=3, check.names = F)
ass.allbutH4 = decostand(as.data.frame(t(ass.all.COI[,row.names(mdAllButH4)])),
method="total")
tra_all = taxa.all.COI[,c("Rank","Taxonpath",row.names(mdAllButH4))]
grouping_info<-data.frame(row.names=row.names(mdAllButH4), mdAllButH4$Group)
ranks = data.frame(rank=c("phylum","class","order","family","genus","species"),
levels=c(15,25,25,25,25,25))
summary(tra_all$Rank)
# 18 phyla, 43 classes, 75 orders, 88 families,
# 93 genera, 77 spp.
for (i in c(1:6)){
r=as.character(ranks$rank[i])
leveltax.COIa = as.data.frame(t(tra_all[tra_all$Rank==r,-c(1:2)]))
print(paste(mean(rowSums(leveltax.COIa))*100,"% classified at rank",r))
pdf(paste("../img/COI/taxon_barplots_all/",r,".pdf",sep=""),height=9,width=20)
taxaplot(ranks$levels[i],grouping_info,leveltax.COIa)
dev.off()
}
pdf("../img/COI/taxon_barplots_all/Assignments_all_butH4.pdf",height=9,width=20)
taxaplot(30,grouping_info,ass.allbutH4)
dev.off()
mdExtra = mdAllButH4[mdAllButH4$Experiment=="GrabEXandPCRRep",]
tra_og = taxa.all.COI[,c("Rank","Taxonpath",row.names(mdExtra))]
grouping_info<-data.frame(row.names=row.names(mdExtra), paste("Grab",mdExtra$Grab))
ranks = data.frame(rank=c("superkingdom","kingdom","phylum","class","order","family","genus"),
levels=c(6,9,25,25,25,25,25))
for (i in c(1:7)){
r=as.character(ranks$rank[i])
leveltax.COIa = as.data.frame(t(tra_og[tra_og$Rank==r,-c(1:2)]))
print(paste(mean(rowSums(leveltax.COIa))*100,"% classified at rank",r))
pdf(paste("../img/COI/taxon_barplots_all/",r,"_pre_v_post_PCR_pooling.pdf",sep=""),
height=7,width=10)
taxaplot(ranks$levels[i],grouping_info,leveltax.COIa)
dev.off()
}
ass.extra = decostand(as.data.frame(t(ass.all.COI[,row.names(mdExtra)])),
method="total")
pdf("../img/COI/taxon_barplots_all/Assignments_pre_v_post_PCR_pooling.pdf",
height=6,width=9)
taxaplot(30,grouping_info,ass.extra)
dev.off()
ranks = data.frame(rank=c("phylum","class","order","family","genus","species"),
levels=c(15,25,25,25,25,25))
grouping_info<-data.frame(row.names=row.names(mdExtra), paste("Grab",mdExtra$Grab))
for (i in c(1:6)){
r=as.character(ranks$rank[i])
leveltax.COIa = as.data.frame(t(tra_og[tra_og$Rank==r,-c(1:2)]))
print(paste(mean(rowSums(leveltax.COIa))*100,"% classified at rank",r))
pdf(paste("../img/COI/taxon_barplots_all/",r,"_pre_v_post_PCR_pooling.pdf",sep=""),
height=7,width=10)
taxaplot(ranks$levels[i],grouping_info,leveltax.COIa)
dev.off()
}
